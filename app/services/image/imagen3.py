import asyncio
import os
from typing import Optional
from datetime import datetime
from io import BytesIO

try:
    from google import genai as imagen_genai
    from google.genai import types
    from PIL import Image
except ImportError:
    imagen_genai = None
    types = None
    Image = None

from app.core.config import settings
from .base import BaseImageService, ImageResult, ImageProvider

class Imagen3Service(BaseImageService):
    """Imagen 3 APIを使用した画像生成サービス"""
    
    def __init__(self):
        super().__init__()
        self.provider = ImageProvider.IMAGEN3
        self.client = None
        self._initialize_client()
        # 画像生成並列処理用セマフォ（同時実行数を制限）
        self.semaphore = asyncio.Semaphore(settings.IMAGE_CONCURRENT_CHUNK_LIMIT)
    
    def _initialize_client(self):
        """Imagen 3 APIクライアントを初期化"""
        try:
            if not imagen_genai or not types or not Image:
                print("❌ google-genai or PIL package not installed. Install with: pip install google-genai pillow")
                return
                
            if settings.GEMINI_API_KEY and settings.IMAGE_GENERATION_ENABLED:
                self.client = imagen_genai.Client(api_key=settings.GEMINI_API_KEY)
                print("🔧 Imagen 3 Service initialized successfully")
            else:
                print("⚠️ GEMINI_API_KEY not set or IMAGE_GENERATION_ENABLED is False")
                
        except Exception as e:
            print(f"❌ Failed to initialize Imagen 3 Service: {e}")
            self.client = None
    
    def is_available(self) -> bool:
        """サービスが利用可能かチェック"""
        return (self.client is not None and 
                bool(settings.GEMINI_API_KEY) and 
                settings.IMAGE_GENERATION_ENABLED and
                imagen_genai is not None and
                types is not None and
                Image is not None)
    
    async def generate_single_image(
        self, 
        japanese_name: str, 
        english_name: str, 
        description: str, 
        category: str
    ) -> dict:
        """単一のメニューアイテムの画像を生成"""
        try:
            # 画像生成用のプロンプト作成
            prompt = self.create_image_prompt(japanese_name, english_name, description, category)
            
            if not self.validate_prompt_content(prompt):
                raise ValueError("Invalid prompt content")
            
            # Imagen 3で画像生成
            response = self.client.models.generate_images(
                model=settings.IMAGEN_MODEL,
                prompt=prompt,
                config=types.GenerateImagesConfig(
                    number_of_images=settings.IMAGEN_NUMBER_OF_IMAGES,
                    aspect_ratio=settings.IMAGEN_ASPECT_RATIO
                )
            )
            
            if response.generated_images:
                # 画像を保存
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = self.create_safe_filename(english_name, timestamp)
                image_path = f"{settings.UPLOAD_DIR}/{filename}"
                
                # ディレクトリが存在しない場合は作成
                os.makedirs(settings.UPLOAD_DIR, exist_ok=True)
                
                # 画像を保存
                generated_image = response.generated_images[0]
                image = Image.open(BytesIO(generated_image.image.image_bytes))
                image.save(image_path)
                
                # 結果を返す
                return {
                    "japanese_name": japanese_name,
                    "english_name": english_name,
                    "image_url": f"/{settings.UPLOAD_DIR}/{filename}",
                    "image_path": image_path,
                    "prompt_used": prompt,
                    "generation_success": True
                }
            else:
                return {
                    "japanese_name": japanese_name,
                    "english_name": english_name,
                    "image_url": None,
                    "error": "No image generated by Imagen 3",
                    "generation_success": False
                }
                
        except Exception as e:
            return {
                "japanese_name": japanese_name,
                "english_name": english_name,
                "image_url": None,
                "error": str(e),
                "generation_success": False
            }
    
    async def process_image_chunk(
        self, 
        category: str, 
        chunk: list, 
        chunk_number: int, 
        total_chunks: int,
        session_id: Optional[str] = None
    ) -> list:
        """画像生成チャンクを処理"""
        print(f"  🖼️ Processing image chunk {chunk_number}/{total_chunks} ({len(chunk)} items)")
        
        # 進行状況通知（チャンク処理中）
        if session_id:
            from app.main import send_progress
            await send_progress(
                session_id, 5, "active", 
                f"🎨 Processing {category} images (chunk {chunk_number}/{total_chunks})",
                {"chunk_progress": f"{chunk_number}/{total_chunks}", "parallel_processing": True}
            )
        
        chunk_results = []
        
        try:
            for i, item in enumerate(chunk):
                if not self.validate_menu_item(item):
                    print(f"    ⚠️ Skipping invalid menu item: {item}")
                    continue
                
                japanese_name = item.get("japanese_name", "N/A")
                english_name = item.get("english_name", "N/A")
                description = item.get("description", "")
                
                print(f"    🎨 Generating image for: {english_name} (item {i+1}/{len(chunk)})")
                
                # 単一画像生成
                image_result = await self.generate_single_image(
                    japanese_name, english_name, description, category
                )
                
                chunk_results.append(image_result)
                
                if image_result.get("generation_success"):
                    print(f"      ✅ Image generated successfully: {image_result.get('image_url')}")
                else:
                    print(f"      ❌ Failed to generate image: {image_result.get('error', 'Unknown error')}")
                
                # レート制限対策（チャンク内では短めに）
                if i < len(chunk) - 1:  # 最後のアイテムでない場合のみ待機
                    await asyncio.sleep(settings.IMAGE_RATE_LIMIT_SLEEP * 0.5)
            
            print(f"    ✅ Successfully processed image chunk {chunk_number}/{total_chunks}")
            return chunk_results
            
        except Exception as chunk_error:
            print(f"  ⚠️ Image chunk processing error: {chunk_error}")
            print(f"    🔄 Creating fallback results for chunk {chunk_number}")
            
            # エラー時はフォールバック結果を生成
            fallback_results = []
            for item in chunk:
                fallback_results.append({
                    "japanese_name": item.get("japanese_name", "N/A"),
                    "english_name": item.get("english_name", "N/A"),
                    "image_url": None,
                    "error": f"Chunk processing error: {str(chunk_error)}",
                    "generation_success": False
                })
            
            return fallback_results
    
    async def process_image_chunk_with_semaphore(
        self, 
        category: str, 
        chunk: list, 
        chunk_number: int, 
        total_chunks: int,
        session_id: Optional[str] = None
    ) -> tuple:
        """セマフォを使用して画像チャンクを並列処理"""
        async with self.semaphore:
            print(f"  🚀 Starting parallel image chunk {chunk_number}/{total_chunks} ({len(chunk)} items)")
            
            # 進行状況通知（チャンク開始）
            if session_id:
                from app.main import send_progress
                await send_progress(
                    session_id, 5, "active", 
                    f"🚀 Starting parallel image generation for {category} (chunk {chunk_number}/{total_chunks})",
                    {
                        "chunk_progress": f"{chunk_number}/{total_chunks}",
                        "parallel_processing": True,
                        "chunk_started": chunk_number
                    }
                )
            
            try:
                # チャンク処理を実行
                result = await self.process_image_chunk(category, chunk, chunk_number, total_chunks, session_id)
                
                print(f"  ✅ Completed parallel image chunk {chunk_number}/{total_chunks}")
                return (chunk_number, result, None)  # (chunk_number, result, error)
                
            except Exception as e:
                print(f"  ❌ Error in parallel image chunk {chunk_number}/{total_chunks}: {e}")
                return (chunk_number, None, str(e))
    
    async def process_category_parallel(
        self,
        category: str,
        items: list,
        session_id: Optional[str] = None
    ) -> list:
        """カテゴリ内のアイテムを並列チャンク処理で画像生成"""
        if not items:
            return []
            
        print(f"🎨 Processing category images: {category} ({len(items)} items) - PARALLEL MODE")
        
        # 進行状況通知（カテゴリ開始）
        if session_id:
            from app.main import send_progress
            await send_progress(
                session_id, 5, "active", 
                f"🎨 Generating images for {category} (parallel processing)...",
                {
                    "processing_category": category,
                    "parallel_mode": True,
                    "total_items": len(items)
                }
            )
        
        # チャンクに分割
        chunk_size = settings.IMAGE_PROCESSING_CHUNK_SIZE
        chunks = []
        
        for i in range(0, len(items), chunk_size):
            chunk = items[i:i + chunk_size]
            chunk_number = (i // chunk_size) + 1
            total_chunks = (len(items) + chunk_size - 1) // chunk_size
            chunks.append((chunk, chunk_number, total_chunks))
        
        print(f"  📦 Created {len(chunks)} image chunks for parallel processing")
        
        # 全チャンクを並列で処理
        tasks = []
        for chunk, chunk_number, total_chunks in chunks:
            task = self.process_image_chunk_with_semaphore(
                category, chunk, chunk_number, total_chunks, session_id
            )
            tasks.append(task)
        
        # 並列実行開始
        print(f"  🚀 Starting {len(tasks)} parallel image chunk tasks...")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # 結果を処理
        category_results = []
        successful_chunks = 0
        failed_chunks = 0
        
        # チャンク番号でソート（元の順序を維持）
        sorted_results = []
        for result in results:
            if isinstance(result, tuple):
                sorted_results.append(result)
            else:
                # 例外が発生した場合
                print(f"  ⚠️ Exception in parallel image processing: {result}")
                failed_chunks += 1
        
        sorted_results.sort(key=lambda x: x[0])  # chunk_numberでソート
        
        for chunk_number, chunk_result, error in sorted_results:
            if error:
                print(f"  ⚠️ Image chunk {chunk_number} failed: {error}")
                failed_chunks += 1
                # フォールバック処理（空の結果を追加）
            elif chunk_result:
                category_results.extend(chunk_result)
                successful_chunks += 1
                
                # チャンク完了の進捗送信
                if session_id:
                    successful_images = sum(1 for img in chunk_result if img.get("generation_success"))
                    await send_progress(
                        session_id, 5, "active", 
                        f"🎨 {category}: Image chunk {chunk_number} completed ({successful_images}/{len(chunk_result)} images)",
                        {
                            "processing_category": category,
                            "chunk_completed": chunk_number,
                            "chunk_result": chunk_result,
                            "parallel_processing": True,
                            "successful_chunks": successful_chunks,
                            "failed_chunks": failed_chunks,
                            "chunk_images_generated": successful_images,
                            "chunk_images_failed": len(chunk_result) - successful_images
                        }
                    )
        
        print(f"  ✅ Parallel image processing complete: {successful_chunks} successful, {failed_chunks} failed chunks")
        
        # カテゴリ完了通知
        if session_id:
            category_successful = sum(1 for img in category_results if img.get("generation_success"))
            await send_progress(
                session_id, 5, "active", 
                f"✅ {category}の画像生成完了！{category_successful}/{len(category_results)}枚の画像を並列処理で生成しました",
                {
                    "category_completed": category,
                    "category_images": category_results,
                    "successful_images": category_successful,
                    "total_category_items": len(category_results),
                    "parallel_processing_stats": {
                        "successful_chunks": successful_chunks,
                        "failed_chunks": failed_chunks,
                        "total_chunks": len(chunks),
                        "processing_mode": "parallel"
                    }
                }
            )
        
        return category_results
    
    async def generate_images(
        self, 
        final_menu: dict, 
        session_id: Optional[str] = None
    ) -> ImageResult:
        """
        メニューアイテムの画像をImagen 3で生成
        
        Args:
            final_menu: 詳細説明付きメニューデータ
            session_id: セッションID（進行状況通知用）
            
        Returns:
            ImageResult: 画像生成結果
        """
        print("🎨 Starting image generation with Imagen 3...")
        
        # サービス利用可能性チェック
        if not self.is_available():
            return ImageResult(
                success=True,  # 画像生成はオプショナルなので成功とする
                image_method="imagen3",
                metadata={
                    "skipped_reason": "Imagen 3 not available",
                    "error_type": "service_unavailable",
                    "suggestions": [
                        "Set GEMINI_API_KEY environment variable",
                        "Install required packages: google-genai, pillow",
                        "Enable IMAGE_GENERATION_ENABLED in settings",
                        "Check Gemini API access permissions"
                    ]
                }
            )
        
        # 入力データの妥当性チェック
        if not self.validate_menu_data(final_menu):
            return ImageResult(
                success=False,
                image_method="imagen3",
                error="Invalid menu data",
                metadata={
                    "error_type": "invalid_input",
                    "suggestions": [
                        "Provide valid menu data with descriptions",
                        "Ensure at least one category has menu items",
                        "Check menu data structure format"
                    ]
                }
            )
        
        try:
            images_generated = {}
            total_items = sum(len(items) for items in final_menu.values())
            processed_items = 0
            successful_images = 0
            
            print(f"🖼️ Total items to generate images for: {total_items}")
            print(f"🚀 Parallel image processing enabled with max {settings.IMAGE_CONCURRENT_CHUNK_LIMIT} concurrent chunks")
            
            # カテゴリの並列処理も可能にする（オプション）
            if settings.ENABLE_IMAGE_CATEGORY_PARALLEL and len(final_menu) > 1:
                print("🌟 Category-level parallel image processing enabled")
                
                # カテゴリごとの処理タスクを作成
                category_tasks = []
                for category, items in final_menu.items():
                    if items:  # 空でないカテゴリのみ処理
                        task = self.process_category_parallel(category, items, session_id)
                        category_tasks.append((category, task))
                
                # カテゴリを並列で処理
                category_results = await asyncio.gather(
                    *[task for _, task in category_tasks], 
                    return_exceptions=True
                )
                
                # 結果をマッピング
                for i, (category, _) in enumerate(category_tasks):
                    if i < len(category_results) and not isinstance(category_results[i], Exception):
                        images_generated[category] = category_results[i]
                        # 成功した画像数をカウント
                        successful_images += sum(1 for img in category_results[i] if img.get("generation_success"))
                    else:
                        print(f"⚠️ Category {category} image processing failed")
                        images_generated[category] = []
                
                # 空のカテゴリを追加
                for category, items in final_menu.items():
                    if not items:
                        images_generated[category] = []
                        
            else:
                # カテゴリごとに順次処理（但しチャンク内は並列）
                for category, items in final_menu.items():
                    if not items:
                        images_generated[category] = []
                        continue
                    
                    # カテゴリ内並列処理を実行
                    category_results = await self.process_category_parallel(category, items, session_id)
                    images_generated[category] = category_results
                    
                    # 成功した画像数をカウント
                    successful_images += sum(1 for img in category_results if img.get("generation_success"))
            
            print(f"🎉 Imagen 3 Image Generation Complete: Generated {successful_images}/{total_items} images")
            
            # 処理統計を生成
            statistics = self.extract_generation_statistics(final_menu, images_generated)
            
            return ImageResult(
                success=True,
                images_generated=images_generated,
                total_images=successful_images,
                total_items=total_items,
                image_method="imagen3",
                metadata={
                    "provider": "Imagen 3 (Google)",
                    "model": settings.IMAGEN_MODEL,
                    "successful_images": successful_images,
                    "failed_images": total_items - successful_images,
                    "processing_statistics": statistics,
                    "features": [
                        "professional_food_photography",
                        "category_specific_styling",
                        "japanese_cuisine_focus",
                        "high_quality_generation",
                        "real_time_progress",
                        "parallel_chunked_processing"
                    ],
                    "image_settings": {
                        "model": settings.IMAGEN_MODEL,
                        "aspect_ratio": settings.IMAGEN_ASPECT_RATIO,
                        "number_of_images": settings.IMAGEN_NUMBER_OF_IMAGES,
                        "rate_limit_sleep": settings.IMAGE_RATE_LIMIT_SLEEP
                    },
                    "parallel_processing": {
                        "enabled": True,
                        "concurrent_chunk_limit": settings.IMAGE_CONCURRENT_CHUNK_LIMIT,
                        "category_parallel": settings.ENABLE_IMAGE_CATEGORY_PARALLEL,
                        "chunk_size": settings.IMAGE_PROCESSING_CHUNK_SIZE,
                        "processing_mode": "parallel_chunked"
                    }
                }
            )
            
        except Exception as e:
            print(f"❌ Imagen 3 Image Generation Failed: {e}")
            
            # エラータイプの判定
            error_type = "unknown_error"
            suggestions = []
            
            if "rate limit" in str(e).lower():
                error_type = "rate_limit_exceeded"
                suggestions = [
                    "Wait before retrying image generation",
                    "Check Gemini API usage limits",
                    "Consider reducing the number of images",
                    "Increase IMAGE_RATE_LIMIT_SLEEP setting"
                ]
            elif "quota" in str(e).lower():
                error_type = "quota_exceeded"
                suggestions = [
                    "Check Gemini API quota limits",
                    "Upgrade your Gemini API plan",
                    "Try generating fewer images",
                    "Contact Google Cloud support"
                ]
            elif "authentication" in str(e).lower() or "api key" in str(e).lower():
                error_type = "authentication_error"
                suggestions = [
                    "Check GEMINI_API_KEY is valid",
                    "Verify API key permissions",
                    "Ensure Imagen 3 access is enabled",
                    "Check Google Cloud project settings"
                ]
            else:
                suggestions = [
                    "Check GEMINI_API_KEY is valid",
                    "Verify Imagen 3 service availability",
                    "Check internet connectivity",
                    "Ensure menu data is properly formatted"
                ]
            
            return ImageResult(
                success=False,
                image_method="imagen3",
                error=f"Imagen 3 image generation error: {str(e)}",
                metadata={
                    "error_type": error_type,
                    "original_error": str(e),
                    "suggestions": suggestions,
                    "provider": "Imagen 3 (Google)",
                    "model": settings.IMAGEN_MODEL,
                    "processed_items": processed_items if 'processed_items' in locals() else 0,
                    "total_items": sum(len(items) for items in final_menu.values())
                }
            )
    
    def get_service_info(self) -> dict:
        """Imagen 3サービス固有の情報を取得"""
        base_info = super().get_service_info()
        
        imagen3_specific = {
            "model": settings.IMAGEN_MODEL,
            "provider_name": "Google Imagen 3",
            "aspect_ratio": settings.IMAGEN_ASPECT_RATIO,
            "images_per_request": settings.IMAGEN_NUMBER_OF_IMAGES,
            "rate_limit_sleep": settings.IMAGE_RATE_LIMIT_SLEEP,
            "image_format": "PNG",
            "max_resolution": "High quality restaurant photography",
            "specializations": [
                "professional_food_photography",
                "japanese_cuisine_styling",
                "menu_item_presentation",
                "category_specific_aesthetics"
            ]
        }
        
        # ベース情報にImagen 3固有情報を追加
        base_info.update(imagen3_specific)
        return base_info
    
    def get_supported_styles(self) -> dict:
        """サポートされているスタイル一覧を取得"""
        return {
            "food_photography_styles": [
                "professional lighting",
                "appetizing appearance", 
                "clean background",
                "elegant table setting",
                "high quality photography"
            ],
            "category_specific_styles": self.get_category_styles(),
            "japanese_cuisine_focus": [
                "traditional presentation",
                "authentic plating",
                "cultural context",
                "seasonal aesthetics"
            ],
            "technical_specifications": {
                "aspect_ratio": settings.IMAGEN_ASPECT_RATIO,
                "quality": "high",
                "format": "PNG",
                "lighting": "professional"
            }
        }
