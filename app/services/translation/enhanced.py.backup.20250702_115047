"""
Enhanced Translation Service - 強化版翻訳サービス
新しい基盤クラスを使用した高度な翻訳サービス実装

新機能:
- 統一されたエラーハンドリング
- 翻訳品質指標（カバレッジ、文化的適応度、一貫性）
- パフォーマンス測定
- 既存システムとの完全互換性
"""
import re
from typing import Optional, Dict, Any, List
from datetime import datetime
from pydantic import Field

from app.services.base import (
    BaseResult, BaseService, ErrorType,
    ValidationError, APIError, ServiceUnavailableError
)
from app.services.translation.base import TranslationResult
from app.core.config import settings


class EnhancedTranslationResult(BaseResult):
    """
    強化版翻訳結果クラス
    
    BaseResultを継承し、翻訳固有の機能を追加
    既存のTranslationResultとの完全互換性を維持
    """
    
    # 翻訳固有フィールド
    translated_categories: Dict[str, List[Dict[str, Any]]] = Field(default_factory=dict, description="翻訳されたカテゴリ")
    translation_method: str = Field(default="", description="翻訳手法")
    
    # 新しい高度な機能
    fallback_used: bool = Field(default=False, description="フォールバック使用フラグ")
    total_items: Optional[int] = Field(default=None, description="総アイテム数")
    translated_items: Optional[int] = Field(default=None, description="翻訳済みアイテム数")
    
    # 品質指標（翻訳特化）
    translation_coverage: Optional[float] = Field(default=None, description="翻訳カバレッジ")
    consistency_score: Optional[float] = Field(default=None, description="翻訳一貫性")
    fallback_effectiveness: Optional[float] = Field(default=None, description="フォールバック効果")
    
    # 翻訳詳細情報
    category_mapping_used: Dict[str, str] = Field(default_factory=dict, description="使用されたカテゴリマッピング")
    untranslated_items: List[str] = Field(default_factory=list, description="翻訳失敗アイテム")
    
    def to_dict(self) -> Dict[str, Any]:
        """辞書形式に変換（翻訳特化情報含む）"""
        result = super().to_dict()
        
        # 翻訳固有の情報を追加
        result["translated_categories"] = self.translated_categories
        result["translation_method"] = self.translation_method
        
        if self.fallback_used is not None:
            result["fallback_used"] = self.fallback_used
        if self.total_items is not None:
            result["total_items"] = self.total_items
        if self.translated_items is not None:
            result["translated_items"] = self.translated_items
        if self.translation_coverage is not None:
            result["translation_coverage"] = self.translation_coverage
        if self.consistency_score is not None:
            result["consistency_score"] = self.consistency_score
        if self.fallback_effectiveness is not None:
            result["fallback_effectiveness"] = self.fallback_effectiveness
        if self.category_mapping_used:
            result["category_mapping_used"] = self.category_mapping_used
        if self.untranslated_items:
            result["untranslated_items"] = self.untranslated_items
            
        return result
    
    def get_translation_statistics(self) -> Dict[str, Any]:
        """翻訳統計を取得"""
        total_items = sum(len(items) for items in self.translated_categories.values())
        untranslated_count = len(self.untranslated_items)
        
        stats = {
            "total_items": total_items,
            "translated_items": total_items - untranslated_count,
            "untranslated_items": untranslated_count,
            "categories_count": len(self.translated_categories),
            "translation_rate": (total_items - untranslated_count) / total_items if total_items > 0 else 0,
            "categories_distribution": {
                category: len(items) 
                for category, items in self.translated_categories.items()
            },
            "category_mappings_used": len(self.category_mapping_used),
            "fallback_used": self.fallback_used
        }
        
        # 既存フィールドを更新
        self.total_items = total_items
        self.translated_items = total_items - untranslated_count
        
        return stats


class EnhancedTranslationService(BaseService):
    """
    強化版翻訳サービス
    
    BaseServiceを継承し、統一されたエラーハンドリング、
    パフォーマンス測定、翻訳品質指標を提供
    """
    
    def __init__(self):
        super().__init__()
        self.provider = "enhanced_translation"
        self._translation_stats = {
            "total_translations": 0,
            "successful_translations": 0,
            "fallback_usage_count": 0,
            "average_items_per_translation": 0.0,
            "most_common_source_language": "japanese",
            "most_common_target_language": "english"
        }
    
    def is_available(self) -> bool:
        """サービス利用可能性チェック"""
        # Google Translate または OpenAI のどちらかが利用可能であればOK
        try:
            from app.services.translation.google_translate import GoogleTranslateService
            from app.services.translation.openai import OpenAITranslationService
            
            google_service = GoogleTranslateService()
            openai_service = OpenAITranslationService()
            
            return google_service.is_available() or openai_service.is_available()
        except Exception:
            return False
    
    def get_capabilities(self) -> List[str]:
        """翻訳サービスの機能一覧"""
        return [
            "menu_translation",
            "category_mapping",
            "japanese_to_english",
            "price_preservation",
            "quality_assessment",
            "performance_monitoring",
            "error_recovery",
            "fallback_management",
            "consistency_evaluation"
        ]
    
    def get_category_mapping(self) -> Dict[str, str]:
        """カテゴリ名のマッピング辞書を取得（日本語→英語）"""
        return {
            "前菜": "Appetizers",
            "メイン": "Main Dishes", 
            "ドリンク": "Drinks",
            "デザート": "Desserts",
            "飲み物": "Beverages",
            "お酒": "Alcoholic Beverages",
            "サラダ": "Salads",
            "スープ": "Soups",
            "パスタ": "Pasta",
            "ピザ": "Pizza",
            "肉料理": "Meat Dishes",
            "魚料理": "Seafood",
            "鍋料理": "Hot Pot",
            "揚げ物": "Fried Foods",
            "焼き物": "Grilled Foods",
            "サイド": "Side Dishes",
            "その他": "Others"
        }
    

    
    async def translate_menu(
        self, 
        categorized_data: Dict[str, List], 
        session_id: Optional[str] = None
    ) -> EnhancedTranslationResult:
        """
        カテゴリ分類されたメニューを翻訳（強化版）
        
        エラーハンドリング、パフォーマンス測定、品質評価を含む
        """
        start_time = datetime.now()
        
        try:
            # 入力検証
            self._validate_categorized_data(categorized_data)
            
            # 翻訳実行
            result = await self._perform_translation_with_monitoring(
                categorized_data, 
                session_id, 
                start_time
            )
            
            # 統計更新
            self._update_translation_stats(result)
            
            return result
            
        except ValidationError as e:
            # バリデーションエラーを適切にハンドル
            processing_time = (datetime.now() - start_time).total_seconds()
            self._update_performance_stats(processing_time, False)
            
            return self._create_error_result(
                str(e),
                EnhancedTranslationResult,
                ErrorType.VALIDATION_ERROR,
                e.suggestions,
                context={
                    "categorized_data_size": len(categorized_data) if categorized_data else 0,
                    "session_id": session_id,
                    "field_name": getattr(e, 'field_name', None)
                }
            )
            
        except APIError as e:
            # APIエラーを適切にハンドル
            processing_time = (datetime.now() - start_time).total_seconds()
            self._update_performance_stats(processing_time, False)
            
            return self._create_error_result(
                str(e),
                EnhancedTranslationResult,
                ErrorType.API_ERROR,
                e.suggestions,
                context={
                    "categorized_data_size": len(categorized_data) if categorized_data else 0,
                    "session_id": session_id,
                    "api_service": getattr(e, 'api_service', None),
                    "status_code": getattr(e, 'status_code', None)
                }
            )
            
        except ServiceUnavailableError as e:
            # サービス利用不可エラーを適切にハンドル
            processing_time = (datetime.now() - start_time).total_seconds()
            self._update_performance_stats(processing_time, False)
            
            return self._create_error_result(
                str(e),
                EnhancedTranslationResult,
                ErrorType.SERVICE_UNAVAILABLE,
                e.suggestions,
                context={
                    "categorized_data_size": len(categorized_data) if categorized_data else 0,
                    "session_id": session_id,
                    "service_name": getattr(e, 'service_name', None)
                }
            )
            
        except Exception as e:
            # その他の予期しない例外を適切にハンドル
            processing_time = (datetime.now() - start_time).total_seconds()
            self._update_performance_stats(processing_time, False)
            
            return self._create_error_result(
                f"Translation processing failed: {str(e)}",
                EnhancedTranslationResult,
                ErrorType.PROCESSING_ERROR,
                suggestions=[
                    "システム管理者に連絡してください",
                    "しばらく時間をおいて再試行してください",
                    "入力データの内容を確認してください",
                    "翻訳サービスの状態を確認してください"
                ],
                context={
                    "categorized_data_size": len(categorized_data) if categorized_data else 0,
                    "session_id": session_id,
                    "exception_type": type(e).__name__,
                    "exception_details": str(e)
                }
            )
    
    def _validate_categorized_data(self, categorized_data: Dict[str, List]) -> None:
        """入力データの検証（強化版）"""
        if not categorized_data or not isinstance(categorized_data, dict):
            raise ValidationError(
                "Invalid categorized data: empty or not a dictionary",
                field_name="categorized_data",
                suggestions=[
                    "有効なカテゴリ分類データを提供してください",
                    "辞書形式のデータを確認してください"
                ]
            )
        
        # 少なくとも1つのカテゴリにアイテムがあることを確認
        has_items = any(
            isinstance(items, list) and len(items) > 0 
            for items in categorized_data.values()
        )
        
        if not has_items:
            raise ValidationError(
                "No items found in categorized data",
                field_name="categorized_data",
                suggestions=[
                    "少なくとも1つのカテゴリにメニューアイテムを含めてください",
                    "カテゴリ分類結果を確認してください"
                ]
            )
        
        # 総アイテム数チェック
        total_items = sum(len(items) for items in categorized_data.values())
        max_items = getattr(settings, 'MAX_TRANSLATION_ITEMS', 1000)
        
        if total_items > max_items:
            raise ValidationError(
                f"Too many items for translation: {total_items} (maximum: {max_items})",
                field_name="categorized_data",
                suggestions=[
                    f"アイテム数を{max_items}以下にしてください",
                    "データを分割して処理してください"
                ]
            )
    
    async def _perform_translation_with_monitoring(
        self,
        categorized_data: Dict[str, List],
        session_id: Optional[str],
        start_time: datetime
    ) -> EnhancedTranslationResult:
        """監視機能付き翻訳実行"""
        
        try:
            # 実際の翻訳処理（基本実装はパターンベース、具象クラスで高度な翻訳を実装）
            result = await self._perform_translation(categorized_data, session_id)
            
            # 処理時間設定
            result.set_processing_time(start_time)
            
            # 翻訳統計計算
            translation_stats = result.get_translation_statistics()
            
            # 品質評価
            quality_metrics = self._assess_translation_quality(result, translation_stats, categorized_data)
            result.set_quality_metrics(**quality_metrics)
            
            # 翻訳手法情報設定
            if not result.translation_method:
                result.translation_method = "enhanced_translation_v2"
            
            # メタデータ強化
            result.add_metadata("translation_statistics", translation_stats)
            result.add_metadata("processing_details", {
                "original_categories": list(categorized_data.keys()),
                "session_id": session_id,
                "processing_timestamp": datetime.now().isoformat(),
                "category_mappings": self.get_category_mapping()
            })
            
            return result
            
        except Exception as e:
            # 翻訳固有のエラーハンドリング
            if "API" in str(e) or "quota" in str(e).lower():
                raise APIError(
                    f"Translation API error: {str(e)}",
                    api_service="translation_service",
                    suggestions=[
                        "APIキーを確認してください",
                        "API利用制限を確認してください",
                        "しばらく時間をおいて再試行してください",
                        "フォールバックサービスの設定を確認してください"
                    ]
                )
            else:
                raise Exception(f"Translation processing failed: {str(e)}")
    
    async def _perform_translation(
        self, 
        categorized_data: Dict[str, List], 
        session_id: Optional[str] = None
    ) -> EnhancedTranslationResult:
        """
        実際の翻訳処理（サブクラスでオーバーライド）
        
        このメソッドは具体的な翻訳エンジン（Google Translate + OpenAI等）
        で実装される
        """
        # デフォルト実装（テスト用）
        # 基本的なパターンマッチングによる翻訳
        translated_categories = self._basic_pattern_translation(categorized_data)
        
        return self._create_success_result(
            EnhancedTranslationResult,
            translated_categories=translated_categories,
            translation_method="basic_pattern_translation",
            fallback_used=False
        )
    
    def _basic_pattern_translation(self, categorized_data: Dict[str, List]) -> Dict[str, List[Dict[str, Any]]]:
        """基本的なパターンマッチングによる翻訳（フォールバック用）"""
        translated_categories = {}
        category_mapping = self.get_category_mapping()
        
        for japanese_category, items in categorized_data.items():
            # カテゴリ名翻訳
            english_category = category_mapping.get(japanese_category, japanese_category)
            translated_items = []
            
            for item in items:
                if isinstance(item, str):
                    # 文字列の場合
                    japanese_name = item
                    price = ""
                elif isinstance(item, dict):
                    # 辞書の場合
                    japanese_name = item.get("name", "")
                    price = item.get("price", "")
                else:
                    continue
                
                # 簡易翻訳（そのまま保持、実際のAPIで翻訳される）
                english_name = japanese_name
                
                # 価格から日本語部分を除去
                price_cleaned = re.sub(r'[円￥]', '', price) if price else ""
                if price_cleaned and price_cleaned.isdigit():
                    price = f"¥{price_cleaned}"
                
                translated_item = {
                    "japanese_name": japanese_name,
                    "english_name": english_name,
                    "price": price
                }
                translated_items.append(translated_item)
            
            translated_categories[english_category] = translated_items
        
        return translated_categories
    
    def _assess_translation_quality(
        self, 
        result: EnhancedTranslationResult, 
        translation_stats: Dict[str, Any],
        original_data: Dict[str, List]
    ) -> Dict[str, float]:
        """翻訳結果の品質を評価"""
        
        quality_score = 0.0
        confidence = 0.0
        
        total_items = translation_stats["total_items"]
        translation_rate = translation_stats["translation_rate"]
        categories_count = translation_stats["categories_count"]
        
        # 翻訳カバレッジ評価
        translation_coverage = translation_rate
        
        # 一貫性スコア評価
        consistency_score = self._evaluate_translation_consistency(result)
        
        # フォールバック効果評価
        fallback_effectiveness = 1.0 if result.fallback_used and result.success else 0.0
        
        # 総合品質スコア（簡素化）
        if total_items > 0:
            quality_score += 0.5 * translation_coverage    # カバレッジ重視
            quality_score += 0.3 * consistency_score       # 一貫性
            quality_score += 0.2 * (1.0 if categories_count >= len(original_data) else 0.5)  # カテゴリ完全性
        
        # 信頼度は品質スコアを基に計算
        confidence = min(quality_score, 1.0)
        
        # 結果に品質指標を設定
        result.translation_coverage = translation_coverage
        result.consistency_score = consistency_score
        result.fallback_effectiveness = fallback_effectiveness
        
        return {
            "quality_score": quality_score,
            "confidence": confidence
        }
    

    
    def _evaluate_translation_consistency(self, result: EnhancedTranslationResult) -> float:
        """翻訳一貫性を評価"""
        # 同じ日本語名が異なる英語名に翻訳されていないかチェック
        translation_map = {}
        inconsistencies = 0
        total_items = 0
        
        for category, items in result.translated_categories.items():
            for item in items:
                japanese_name = item.get("japanese_name", "")
                english_name = item.get("english_name", "")
                
                if japanese_name and english_name:
                    total_items += 1
                    
                    if japanese_name in translation_map:
                        if translation_map[japanese_name] != english_name:
                            inconsistencies += 1
                    else:
                        translation_map[japanese_name] = english_name
        
        consistency_rate = 1.0 - (inconsistencies / total_items) if total_items > 0 else 1.0
        return max(0.0, consistency_rate)
    
    def _update_translation_stats(self, result: EnhancedTranslationResult) -> None:
        """翻訳統計を更新"""
        self._translation_stats["total_translations"] += 1
        
        if result.success:
            self._translation_stats["successful_translations"] += 1
            
            # 平均アイテム数を更新
            if result.total_items:
                total_translations = self._translation_stats["successful_translations"]
                current_avg = self._translation_stats["average_items_per_translation"]
                self._translation_stats["average_items_per_translation"] = (
                    (current_avg * (total_translations - 1) + result.total_items) / total_translations
                )
            
            # フォールバック使用回数
            if result.fallback_used:
                self._translation_stats["fallback_usage_count"] += 1
    
    def create_compatible_result(self, enhanced_result: EnhancedTranslationResult) -> TranslationResult:
        """既存TranslationResultとの互換性のため変換"""
        return TranslationResult(
            success=enhanced_result.success,
            translated_categories=enhanced_result.translated_categories,
            translation_method=enhanced_result.translation_method,
            error=enhanced_result.error,
            metadata=enhanced_result.metadata
        )
    
    def get_translation_statistics(self) -> Dict[str, Any]:
        """翻訳固有の統計を取得"""
        stats = self._translation_stats.copy()
        
        if stats["total_translations"] > 0:
            stats["success_rate"] = stats["successful_translations"] / stats["total_translations"]
            stats["fallback_usage_rate"] = stats["fallback_usage_count"] / stats["total_translations"]
        else:
            stats["success_rate"] = 0.0
            stats["fallback_usage_rate"] = 0.0
        
        return stats 