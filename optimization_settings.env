# ===============================================
# バックエンド高速化設定ファイル
# ===============================================
# このファイルの設定を.envに追加すると、処理速度が大幅に向上します
# フロントエンドには一切影響しません

# === 並列処理の大幅強化 ===
CONCURRENT_CHUNK_LIMIT=8                    # 5→8 (60%高速化)
IMAGE_CONCURRENT_CHUNK_LIMIT=6              # 3→6 (100%高速化)
PROCESSING_CHUNK_SIZE=5                     # 3→5 (効率化)
IMAGE_PROCESSING_CHUNK_SIZE=5               # 3→5 (効率化)

# === Celeryワーカー最適化 ===
CELERY_WORKER_CONCURRENCY=6                 # ワーカーの同時実行数（推奨: CPUコア数）
CELERY_WORKER_PREFETCH_MULTIPLIER=3         # プリフェッチ数（高速化）
CELERY_WORKER_MAX_TASKS_PER_CHILD=50        # メモリリーク防止
CELERY_TASK_COMPRESSION=gzip                # データ圧縮
CELERY_RESULT_EXPIRES=7200                  # 結果保持時間（2時間）

# === ワーカー数の増強 ===
MAX_IMAGE_WORKERS=6                         # 3→6 (100%高速化)

# === レート制限の最適化 ===
RATE_LIMIT_SLEEP=0.3                       # 1.0→0.3 (3倍高速化)
IMAGE_RATE_LIMIT_SLEEP=1.0                 # 2.0→1.0 (2倍高速化)

# === OpenAI最適化 ===
OPENAI_TIMEOUT=90.0                         # 120→90 (タイムアウト短縮)
OPENAI_MAX_RETRIES=2                        # 3→2 (リトライ回数削減)

# === 大量データ対応の無制限モード ===
UNLIMITED_PROCESSING=true                   # false→true (制限解除)
MAX_ITEMS_PER_JOB=300                      # 100→300 (3倍の容量)
SCALE_WITH_WORKERS=true                    # ワーカー数に応じた自動スケーリング

# === 並列処理フルアクティベーション ===
ENABLE_CATEGORY_PARALLEL=true              # カテゴリレベル並列処理
ENABLE_IMAGE_CATEGORY_PARALLEL=true        # 画像生成カテゴリ並列処理

# === ワーカー均等活用強化 ===
FORCE_WORKER_UTILIZATION=true              # 強制ワーカー活用
DYNAMIC_CHUNK_SIZING=true                  # 動的チャンクサイズ
MIN_CHUNKS_PER_WORKER=0.6                  # 0.8→0.6 (より細かい分散)

# === 非同期処理設定 ===
ASYNC_IMAGE_ENABLED=true                   # 非同期画像生成
USE_REAL_IMAGE_GENERATION=true             # 実際の画像生成

# ===============================================
# 適用方法:
# 1. このファイルの内容を.envファイルに追加
# 2. サーバーを再起動
# 3. 2-4倍の処理速度向上を確認
# =============================================== 